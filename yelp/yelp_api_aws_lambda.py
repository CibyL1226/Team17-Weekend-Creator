# -*- coding: utf-8 -*-
"""team17-capstone.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VHqVSZic7V32Ps1Up4ToDA1EH2FXiXKr

# Data Collection

### Yelp Scrapper Code (Lambda Function)
"""

import json
import requests
import boto3
import os
import time
from datetime import datetime

s3 = boto3.client("s3")

API_KEY = os.environ["yelp_api_key"]
HEADERS = {"Authorization": f"Bearer {API_KEY}"}
BASE_URL = "https://api.yelp.com/v3/businesses/search"

BUCKET_NAME = os.environ["yelp_bucket"]
PREFIX = "yelp_data"

LOCATIONS = ["San Diego", "Boston","New York", "Los Angeles", "Chicago", "Austin", "San Francisco", "Miami", "Seattle"]
SEARCH_TERMS = ["restaurant", "cafe", "bar", "pizza", "sushi", "steakhouse"]

MAX_OFFSET = 190
RESULTS_PER_PAGE = 50
TOTAL_DAILY_LIMIT = 5000
API_CALL_DELAY = 1

def fetch_yelp_data(location, term):
    """Fetches Yelp data using API pagination and returns transformed results."""
    collected_data = []
    call_count = 0

    for offset in range(0, MAX_OFFSET + 1, RESULTS_PER_PAGE):
        if call_count >= TOTAL_DAILY_LIMIT:
            break

        params = {"term": term, "location": location, "limit": RESULTS_PER_PAGE, "offset": offset}

        print(f"Fetching {term} in {location} (offset {offset})")
        response = requests.get(BASE_URL, headers=HEADERS, params=params)

        if response.status_code == 200:
            data = response.json()
            businesses = data.get("businesses", [])
            collected_data.extend(businesses)
            call_count += 1
        else:
            print(f"Error: {response.status_code}, {response.text}")
            break

        time.sleep(API_CALL_DELAY)

    return collected_data

def save_to_s3(data, location, term):
    """Saves nested JSON data to S3 in structured folders."""
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    file_path = f"{PREFIX}/{location}/{term}/data_{timestamp}.json"

    s3.put_object(
        Bucket=BUCKET_NAME,
        Key=file_path,
        Body=json.dumps(data, indent=4)
    )

    return file_path

def lambda_handler(event, context):
    """AWS Lambda handler function."""
    try:
        all_results = {}

        for location in LOCATIONS:
            for term in SEARCH_TERMS:
                data = fetch_yelp_data(location, term)
                if data:
                    save_to_s3(data, location, term)
                    all_results[f"{location}_{term}"] = len(data)

        return {"statusCode": 200, "body": json.dumps(all_results)}

    except Exception as e:
        return {"statusCode": 500, "body": f"Error: {str(e)}"}
